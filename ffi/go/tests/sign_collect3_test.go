package tests

import (
	"testing"

	vault "github.com/scalarorg/bitcoin-vault/ffi/go"
	go_utils "github.com/scalarorg/go-common/types"
)

// Helper function to decode hex string and handle error

func TestSignCollect3(t *testing.T) {
	psbtBytes := mustDecodeHex("70736274ff01006b020000000191c2407618522f0f2741090fb541a1945ec57d6ef1e56c169b6c094932df19290000000000fdffffff020000000000000000106a0e5343414c41520101417472616e73e50200000000000016001450dceca158a9c872eb405d52293d351110572c9e000000000001012be8030000000000002251209ec8dc148990200705b97d6ee201362936d7f9ce80926c7a3e1bdb33382aeda60103040000000041142ae31ea8709aeda8194ba3e2f7e7e95e680e8b65135c8983c0a298d17bc5350abfbe5929c41e60294ee315d057bdf5804beae58e399b040597fe0073837d370a4046dc2b334b1fd4e09e88fc9ec86eba1d170219f05c6a894607092eb4ce9c6c88ac1de7ab642862d218d413a31139918fb313a285fb7b784f66312d0882ba84be6215c150929b74c1a04954b78b4b6035e97a5e078a5a0f28ec96d547bfee9ace803ac01f1e0ba48405ef2db77d68d0e6aa10c28609b69487e89aae8b711045068e496db835c6dc4a9fa6e96baf5f5192244dc0d0cb610e6fb838c419ffddd00efeab7aad202ae31ea8709aeda8194ba3e2f7e7e95e680e8b65135c8983c0a298d17bc5350aad2015da913b3e87b4932b1e1b87d9667c28e7250aa0ed60b3a31095f541e1641488ac20594e78c0a2968210d9c1550d4ad31b03d5e4b9659cf2f67842483bb3c2bb7811ba20b59e575cef873ea95273afd55956c84590507200d410e693e4b079a426cc6102ba20f0f3d9beaf7a3945bcaa147e041ae1d5ca029bde7e40d8251f0783d6ecbe8fb5ba53a2c0211615da913b3e87b4932b1e1b87d9667c28e7250aa0ed60b3a31095f541e16414882501bfbe5929c41e60294ee315d057bdf5804beae58e399b040597fe0073837d370a0000000021162ae31ea8709aeda8194ba3e2f7e7e95e680e8b65135c8983c0a298d17bc5350a2501bfbe5929c41e60294ee315d057bdf5804beae58e399b040597fe0073837d370a000000002116594e78c0a2968210d9c1550d4ad31b03d5e4b9659cf2f67842483bb3c2bb78112501bfbe5929c41e60294ee315d057bdf5804beae58e399b040597fe0073837d370a000000002116b59e575cef873ea95273afd55956c84590507200d410e693e4b079a426cc61022501bfbe5929c41e60294ee315d057bdf5804beae58e399b040597fe0073837d370a000000002116f0f3d9beaf7a3945bcaa147e041ae1d5ca029bde7e40d8251f0783d6ecbe8fb52501bfbe5929c41e60294ee315d057bdf5804beae58e399b040597fe0073837d370a0000000001172050929b74c1a04954b78b4b6035e97a5e078a5a0f28ec96d547bfee9ace803ac00118204e6c5aba100167b13a7a291b09ad74ece13a54ad3f920e0438f6156c47e4a860000000")

	privKeyBytes := mustDecodeHex("f7981df190cd4e8009a5472adf3d6318dee2290698d2ad723e300fbdf80ea81c")

	// privKey := secp256k1.PrivKeyFromBytes(privKeyBytes)

	// pubkey := privKey.PubKey()

	// fmt.Printf("pubkey: %x", pubkey.SerializeCompressed())

	tapScriptSigs, err := vault.SignPsbtAndCollectSigs(
		psbtBytes,
		privKeyBytes,
		go_utils.NetworkKindTestnet,
	)
	if err != nil {
		t.Fatalf("SignPsbtAndCollectSigs failed: %v", err)
	}

	t.Logf("TapScriptSigs: %+v", tapScriptSigs)
}

func TestSignEmpty(t *testing.T) {
	psbtBytes := mustDecodeHex("70736274ff01006b020000000191c2407618522f0f2741090fb541a1945ec57d6ef1e56c169b6c094932df19290000000000fdffffff020000000000000000106a0e5343414c41520101417472616e73e50200000000000016001450dceca158a9c872eb405d52293d351110572c9e000000000001012be8030000000000002251209ec8dc148990200705b97d6ee201362936d7f9ce80926c7a3e1bdb33382aeda60103040000000041142ae31ea8709aeda8194ba3e2f7e7e95e680e8b65135c8983c0a298d17bc5350abfbe5929c41e60294ee315d057bdf5804beae58e399b040597fe0073837d370a4046dc2b334b1fd4e09e88fc9ec86eba1d170219f05c6a894607092eb4ce9c6c88ac1de7ab642862d218d413a31139918fb313a285fb7b784f66312d0882ba84be6215c150929b74c1a04954b78b4b6035e97a5e078a5a0f28ec96d547bfee9ace803ac01f1e0ba48405ef2db77d68d0e6aa10c28609b69487e89aae8b711045068e496db835c6dc4a9fa6e96baf5f5192244dc0d0cb610e6fb838c419ffddd00efeab7aad202ae31ea8709aeda8194ba3e2f7e7e95e680e8b65135c8983c0a298d17bc5350aad2015da913b3e87b4932b1e1b87d9667c28e7250aa0ed60b3a31095f541e1641488ac20594e78c0a2968210d9c1550d4ad31b03d5e4b9659cf2f67842483bb3c2bb7811ba20b59e575cef873ea95273afd55956c84590507200d410e693e4b079a426cc6102ba20f0f3d9beaf7a3945bcaa147e041ae1d5ca029bde7e40d8251f0783d6ecbe8fb5ba53a2c0211615da913b3e87b4932b1e1b87d9667c28e7250aa0ed60b3a31095f541e16414882501bfbe5929c41e60294ee315d057bdf5804beae58e399b040597fe0073837d370a0000000021162ae31ea8709aeda8194ba3e2f7e7e95e680e8b65135c8983c0a298d17bc5350a2501bfbe5929c41e60294ee315d057bdf5804beae58e399b040597fe0073837d370a000000002116594e78c0a2968210d9c1550d4ad31b03d5e4b9659cf2f67842483bb3c2bb78112501bfbe5929c41e60294ee315d057bdf5804beae58e399b040597fe0073837d370a000000002116b59e575cef873ea95273afd55956c84590507200d410e693e4b079a426cc61022501bfbe5929c41e60294ee315d057bdf5804beae58e399b040597fe0073837d370a000000002116f0f3d9beaf7a3945bcaa147e041ae1d5ca029bde7e40d8251f0783d6ecbe8fb52501bfbe5929c41e60294ee315d057bdf5804beae58e399b040597fe0073837d370a0000000001172050929b74c1a04954b78b4b6035e97a5e078a5a0f28ec96d547bfee9ace803ac00118204e6c5aba100167b13a7a291b09ad74ece13a54ad3f920e0438f6156c47e4a860000000")

	privKeyBytes := mustDecodeHex("f7981df190cd4e8009a5472adf3d6318dee2290698d2ad723e300fbdf80ea81c")

	// privKey := secp256k1.PrivKeyFromBytes(privKeyBytes)

	// pubkey := privKey.PubKey()

	// fmt.Printf("pubkey: %x", pubkey.SerializeCompressed())

	tapScriptSigs, err := vault.SignPsbtAndCollectSigs(
		psbtBytes,
		privKeyBytes,
		go_utils.NetworkKindTestnet,
	)
	if err != nil {
		t.Fatalf("SignPsbtAndCollectSigs failed: %v", err)
	}

	t.Logf("TapScriptSigs: %+v", tapScriptSigs)
}

func TestSignCollect4(t *testing.T) {
	psbtBytes := mustDecodeHex("70736274ff01006b02000000016dfab850206d4c9a1ce3388f8f8766b146e79512ac5624adfded7a3909901f3e0100000000fdffffff020000000000000000106a0e5343414c41520301817472616e73052c3101000000001600148b59bebf94c43703da1e70d0cd6041f006a18d2b000000000001012b002d3101000000002251203586e539faa912b44fa1fa28f45ce3d981183479eaf990066c42c2ffa6f79bdc01030400000000411489ac2fd42f279a5ee7cb7110ff2af168b8f2c16b5008fdea8b72bc9eaabdc6d5d9cef2cd46bd2614ed901be40fccd4938a8779a11ead7f3d2ad54e502d284dfc40733166707aa10cfe23183cc3a3d236f1c9592a82537234e9eb0ae1949b4dc259d8f46cc0936d7cf0cdf99f7836895eddc8c4ce0547907bc6d7f794eb11d35a746215c050929b74c1a04954b78b4b6035e97a5e078a5a0f28ec96d547bfee9ace803ac063d85693fdcf7e1d56c8240e96cbd468d4c580a29a6540a5305aa14fd1a37859e31ca8f6b380e52877e7b46bd7ec71f479bf07848e20eb4051b5baf2b5ee934cad2089ac2fd42f279a5ee7cb7110ff2af168b8f2c16b5008fdea8b72bc9eaabdc6d5ad2015da913b3e87b4932b1e1b87d9667c28e7250aa0ed60b3a31095f541e1641488ac20594e78c0a2968210d9c1550d4ad31b03d5e4b9659cf2f67842483bb3c2bb7811ba20e2d226cfdaec93903c3f3b81a01a81b19137627cb26e621a0afb7bcd6efbcfffba20f0f3d9beaf7a3945bcaa147e041ae1d5ca029bde7e40d8251f0783d6ecbe8fb5ba53a2c0211615da913b3e87b4932b1e1b87d9667c28e7250aa0ed60b3a31095f541e16414882501d9cef2cd46bd2614ed901be40fccd4938a8779a11ead7f3d2ad54e502d284dfc000000002116594e78c0a2968210d9c1550d4ad31b03d5e4b9659cf2f67842483bb3c2bb78112501d9cef2cd46bd2614ed901be40fccd4938a8779a11ead7f3d2ad54e502d284dfc00000000211689ac2fd42f279a5ee7cb7110ff2af168b8f2c16b5008fdea8b72bc9eaabdc6d52501d9cef2cd46bd2614ed901be40fccd4938a8779a11ead7f3d2ad54e502d284dfc000000002116e2d226cfdaec93903c3f3b81a01a81b19137627cb26e621a0afb7bcd6efbcfff2501d9cef2cd46bd2614ed901be40fccd4938a8779a11ead7f3d2ad54e502d284dfc000000002116f0f3d9beaf7a3945bcaa147e041ae1d5ca029bde7e40d8251f0783d6ecbe8fb52501d9cef2cd46bd2614ed901be40fccd4938a8779a11ead7f3d2ad54e502d284dfc000000000118204feee6dae1575d290b065b4af9a90d692f36d8a9ebb64c392514ede6e5da7970000000")

	privKeyBytes := mustDecodeHex("f7981df190cd4e8009a5472adf3d6318dee2290698d2ad723e300fbdf80ea81c")

	tapScriptSigs, err := vault.SignPsbtAndCollectSigs(
		psbtBytes,
		privKeyBytes,
		go_utils.NetworkKindTestnet,
	)
	if err != nil {
		t.Fatalf("SignPsbtAndCollectSigs failed: %v", err)
	}

	t.Logf("TapScriptSigs: %+v", tapScriptSigs)
}
