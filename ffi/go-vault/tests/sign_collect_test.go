package tests

import (
	"encoding/hex"
	"log"
	"testing"

	"github.com/scalarorg/bitcoin-vault/ffi/go-vault"
)

var EXPECTED_TAP_SCRIPT_SIGS []vault.TapScriptSig

func Init() {
	key1, _ := hex.DecodeString("e2d226cfdaec93903c3f3b81a01a81b19137627cb26e621a0afb7bcd6efbcfff")
	leafHash1, _ := hex.DecodeString("5a10a5ec729629c6dd863dc28b7162e18f96b00dedd87f158b228428a298bccb")
	sig1, _ := hex.DecodeString("239da6db674a45bd57a000f815ef2ace29fb58b4b82949473811ba81c003c7ef5937503d00983ee92bd6b89d193e857317b5e6ddae928c48ac922428ce5da7f0")

	key2, _ := hex.DecodeString("e2d226cfdaec93903c3f3b81a01a81b19137627cb26e621a0afb7bcd6efbcfff")
	leafHash2, _ := hex.DecodeString("5a10a5ec729629c6dd863dc28b7162e18f96b00dedd87f158b228428a298bccb")
	sig2, _ := hex.DecodeString("029defef810497a362e01f8409dda52231ff355774fac9202d611538dccf4606068f8f10573efa8d15ad3443f77593eb08fb59aa47074ae2e140d0fe24576285")

	EXPECTED_TAP_SCRIPT_SIGS = []vault.TapScriptSig{
		{
			Signature: *(*[64]byte)(sig1),
			LeafHash:  *(*[32]byte)(leafHash1),
			KeyXOnly:  *(*[32]byte)(key1),
		},
		{
			Signature: *(*[64]byte)(sig2),
			LeafHash:  *(*[32]byte)(leafHash2),
			KeyXOnly:  *(*[32]byte)(key2),
		},
	}
}

// Test constants moved to package level
const (
	PSBT_HEX = "70736274ff0100a602000000021e27ead4ad3eda752e92f04396dbbeb38703d2180f13fd4c00b19003d1cbe9fe0000000000fdffffff0bd4ff182605f410010d2049bb5d0b53127753aff796fdfc4bf721f950cf7a1b0000000000fdffffff02a11900000000000016001450dceca158a9c872eb405d52293d351110572c9ee8f10200000000002251207f815abf6dfd78423a708aa8db1c2c906eecac910c035132d342e4988a37b8d5000000000001012ba0860100000000002251207f815abf6dfd78423a708aa8db1c2c906eecac910c035132d342e4988a37b8d5010304000000002215c050929b74c1a04954b78b4b6035e97a5e078a5a0f28ec96d547bfee9ace803ac0ad2015da913b3e87b4932b1e1b87d9667c28e7250aa0ed60b3a31095f541e1641488ac20594e78c0a2968210d9c1550d4ad31b03d5e4b9659cf2f67842483bb3c2bb7811ba20b59e575cef873ea95273afd55956c84590507200d410e693e4b079a426cc6102ba20e2d226cfdaec93903c3f3b81a01a81b19137627cb26e621a0afb7bcd6efbcfffba20f0f3d9beaf7a3945bcaa147e041ae1d5ca029bde7e40d8251f0783d6ecbe8fb5ba53a2c0211615da913b3e87b4932b1e1b87d9667c28e7250aa0ed60b3a31095f541e164148825015a10a5ec729629c6dd863dc28b7162e18f96b00dedd87f158b228428a298bccb000000002116594e78c0a2968210d9c1550d4ad31b03d5e4b9659cf2f67842483bb3c2bb781125015a10a5ec729629c6dd863dc28b7162e18f96b00dedd87f158b228428a298bccb000000002116b59e575cef873ea95273afd55956c84590507200d410e693e4b079a426cc610225015a10a5ec729629c6dd863dc28b7162e18f96b00dedd87f158b228428a298bccb000000002116e2d226cfdaec93903c3f3b81a01a81b19137627cb26e621a0afb7bcd6efbcfff25015a10a5ec729629c6dd863dc28b7162e18f96b00dedd87f158b228428a298bccb000000002116f0f3d9beaf7a3945bcaa147e041ae1d5ca029bde7e40d8251f0783d6ecbe8fb525015a10a5ec729629c6dd863dc28b7162e18f96b00dedd87f158b228428a298bccb0000000001172050929b74c1a04954b78b4b6035e97a5e078a5a0f28ec96d547bfee9ace803ac00118205a10a5ec729629c6dd863dc28b7162e18f96b00dedd87f158b228428a298bccb0001012ba0860100000000002251207f815abf6dfd78423a708aa8db1c2c906eecac910c035132d342e4988a37b8d5010304000000002215c050929b74c1a04954b78b4b6035e97a5e078a5a0f28ec96d547bfee9ace803ac0ad2015da913b3e87b4932b1e1b87d9667c28e7250aa0ed60b3a31095f541e1641488ac20594e78c0a2968210d9c1550d4ad31b03d5e4b9659cf2f67842483bb3c2bb7811ba20b59e575cef873ea95273afd55956c84590507200d410e693e4b079a426cc6102ba20e2d226cfdaec93903c3f3b81a01a81b19137627cb26e621a0afb7bcd6efbcfffba20f0f3d9beaf7a3945bcaa147e041ae1d5ca029bde7e40d8251f0783d6ecbe8fb5ba53a2c0211615da913b3e87b4932b1e1b87d9667c28e7250aa0ed60b3a31095f541e164148825015a10a5ec729629c6dd863dc28b7162e18f96b00dedd87f158b228428a298bccb000000002116594e78c0a2968210d9c1550d4ad31b03d5e4b9659cf2f67842483bb3c2bb781125015a10a5ec729629c6dd863dc28b7162e18f96b00dedd87f158b228428a298bccb000000002116b59e575cef873ea95273afd55956c84590507200d410e693e4b079a426cc610225015a10a5ec729629c6dd863dc28b7162e18f96b00dedd87f158b228428a298bccb000000002116e2d226cfdaec93903c3f3b81a01a81b19137627cb26e621a0afb7bcd6efbcfff25015a10a5ec729629c6dd863dc28b7162e18f96b00dedd87f158b228428a298bccb000000002116f0f3d9beaf7a3945bcaa147e041ae1d5ca029bde7e40d8251f0783d6ecbe8fb525015a10a5ec729629c6dd863dc28b7162e18f96b00dedd87f158b228428a298bccb0000000001172050929b74c1a04954b78b4b6035e97a5e078a5a0f28ec96d547bfee9ace803ac00118205a10a5ec729629c6dd863dc28b7162e18f96b00dedd87f158b228428a298bccb000000"

	EXPECTED_HEX = "70736274ff0100a602000000021e27ead4ad3eda752e92f04396dbbeb38703d2180f13fd4c00b19003d1cbe9fe0000000000fdffffff0bd4ff182605f410010d2049bb5d0b53127753aff796fdfc4bf721f950cf7a1b0000000000fdffffff02a11900000000000016001450dceca158a9c872eb405d52293d351110572c9ee8f10200000000002251207f815abf6dfd78423a708aa8db1c2c906eecac910c035132d342e4988a37b8d5000000000001012ba0860100000000002251207f815abf6dfd78423a708aa8db1c2c906eecac910c035132d342e4988a37b8d5010304000000004114e2d226cfdaec93903c3f3b81a01a81b19137627cb26e621a0afb7bcd6efbcfff5a10a5ec729629c6dd863dc28b7162e18f96b00dedd87f158b228428a298bccb40239da6db674a45bd57a000f815ef2ace29fb58b4b82949473811ba81c003c7ef5937503d00983ee92bd6b89d193e857317b5e6ddae928c48ac922428ce5da7f02215c050929b74c1a04954b78b4b6035e97a5e078a5a0f28ec96d547bfee9ace803ac0ad2015da913b3e87b4932b1e1b87d9667c28e7250aa0ed60b3a31095f541e1641488ac20594e78c0a2968210d9c1550d4ad31b03d5e4b9659cf2f67842483bb3c2bb7811ba20b59e575cef873ea95273afd55956c84590507200d410e693e4b079a426cc6102ba20e2d226cfdaec93903c3f3b81a01a81b19137627cb26e621a0afb7bcd6efbcfffba20f0f3d9beaf7a3945bcaa147e041ae1d5ca029bde7e40d8251f0783d6ecbe8fb5ba53a2c0211615da913b3e87b4932b1e1b87d9667c28e7250aa0ed60b3a31095f541e164148825015a10a5ec729629c6dd863dc28b7162e18f96b00dedd87f158b228428a298bccb000000002116594e78c0a2968210d9c1550d4ad31b03d5e4b9659cf2f67842483bb3c2bb781125015a10a5ec729629c6dd863dc28b7162e18f96b00dedd87f158b228428a298bccb000000002116b59e575cef873ea95273afd55956c84590507200d410e693e4b079a426cc610225015a10a5ec729629c6dd863dc28b7162e18f96b00dedd87f158b228428a298bccb000000002116e2d226cfdaec93903c3f3b81a01a81b19137627cb26e621a0afb7bcd6efbcfff25015a10a5ec729629c6dd863dc28b7162e18f96b00dedd87f158b228428a298bccb000000002116f0f3d9beaf7a3945bcaa147e041ae1d5ca029bde7e40d8251f0783d6ecbe8fb525015a10a5ec729629c6dd863dc28b7162e18f96b00dedd87f158b228428a298bccb0000000001172050929b74c1a04954b78b4b6035e97a5e078a5a0f28ec96d547bfee9ace803ac00118205a10a5ec729629c6dd863dc28b7162e18f96b00dedd87f158b228428a298bccb0001012ba0860100000000002251207f815abf6dfd78423a708aa8db1c2c906eecac910c035132d342e4988a37b8d5010304000000004114e2d226cfdaec93903c3f3b81a01a81b19137627cb26e621a0afb7bcd6efbcfff5a10a5ec729629c6dd863dc28b7162e18f96b00dedd87f158b228428a298bccb40029defef810497a362e01f8409dda52231ff355774fac9202d611538dccf4606068f8f10573efa8d15ad3443f77593eb08fb59aa47074ae2e140d0fe245762852215c050929b74c1a04954b78b4b6035e97a5e078a5a0f28ec96d547bfee9ace803ac0ad2015da913b3e87b4932b1e1b87d9667c28e7250aa0ed60b3a31095f541e1641488ac20594e78c0a2968210d9c1550d4ad31b03d5e4b9659cf2f67842483bb3c2bb7811ba20b59e575cef873ea95273afd55956c84590507200d410e693e4b079a426cc6102ba20e2d226cfdaec93903c3f3b81a01a81b19137627cb26e621a0afb7bcd6efbcfffba20f0f3d9beaf7a3945bcaa147e041ae1d5ca029bde7e40d8251f0783d6ecbe8fb5ba53a2c0211615da913b3e87b4932b1e1b87d9667c28e7250aa0ed60b3a31095f541e164148825015a10a5ec729629c6dd863dc28b7162e18f96b00dedd87f158b228428a298bccb000000002116594e78c0a2968210d9c1550d4ad31b03d5e4b9659cf2f67842483bb3c2bb781125015a10a5ec729629c6dd863dc28b7162e18f96b00dedd87f158b228428a298bccb000000002116b59e575cef873ea95273afd55956c84590507200d410e693e4b079a426cc610225015a10a5ec729629c6dd863dc28b7162e18f96b00dedd87f158b228428a298bccb000000002116e2d226cfdaec93903c3f3b81a01a81b19137627cb26e621a0afb7bcd6efbcfff25015a10a5ec729629c6dd863dc28b7162e18f96b00dedd87f158b228428a298bccb000000002116f0f3d9beaf7a3945bcaa147e041ae1d5ca029bde7e40d8251f0783d6ecbe8fb525015a10a5ec729629c6dd863dc28b7162e18f96b00dedd87f158b228428a298bccb0000000001172050929b74c1a04954b78b4b6035e97a5e078a5a0f28ec96d547bfee9ace803ac00118205a10a5ec729629c6dd863dc28b7162e18f96b00dedd87f158b228428a298bccb000000"

	PRIVKEY_HEX = "5ddbfaf1f19eedc8999526d618fccbf2572b320ef7b0649d7c91ca5279189a50"
)

// Helper function to decode hex string and handle error

func TestSignPsbtAndCollectSigs(t *testing.T) {
	Init()

	// Setup test inputs
	psbtBytes := mustDecodeHex(PSBT_HEX)
	privkeyBytes := mustDecodeHex(PRIVKEY_HEX)

	// Execute the function being tested
	tapScriptSigs, err := vault.SignPsbtAndCollectSigs(
		psbtBytes,
		privkeyBytes,
		vault.NetworkKindTestnet,
	)
	if err != nil {
		t.Fatalf("SignPsbtAndCollectSigs failed: %v", err)
	}

	// Verify results
	if len(tapScriptSigs) != len(EXPECTED_TAP_SCRIPT_SIGS) {
		t.Errorf("Expected %d signatures, got %d", len(EXPECTED_TAP_SCRIPT_SIGS), len(tapScriptSigs))
	}

	for i, actual := range tapScriptSigs {
		expected := EXPECTED_TAP_SCRIPT_SIGS[i]
		if actual.Signature != expected.Signature {
			t.Errorf("TapScriptSig Signature mismatch at index %d\nexpected: %x\ngot: %x",
				i, expected.Signature, actual.Signature)
		}
	}

	t.Logf("SignPsbtAndCollectSigs passed")

	psbtBytes, err = vault.AggregateTapScriptSigs(
		psbtBytes,
		tapScriptSigs,
	)

	if err != nil {
		t.Fatalf("AggregateTapScriptSigs failed: %v", err)
	}

	if hex.EncodeToString(psbtBytes) != EXPECTED_HEX {
		t.Errorf("Expected %s, got %s", EXPECTED_HEX, hex.EncodeToString(psbtBytes))
	}

	t.Logf("AggregateTapScriptSigs passed")

	tx, err := vault.FinalizePsbtAndExtractTx(psbtBytes)
	if err != nil {
		log.Fatal(err)
	}

	t.Logf("Tx: %x", tx)
}
